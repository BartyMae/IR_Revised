INCLUDE ~item_rev/lib/descriptions.tpa~
INCLUDE ~item_rev/lib/macros.tpa~
INCLUDE ~item_rev/lib/shield_list.tpa~
INCLUDE ~item_rev/lib/identify_item.tpa~

//////////////////////////////////////////////
// Descriptions

DEFINE_PATCH_MACRO ~revised_shields_bonuses_buckler_english~ BEGIN
  SPRINT t1 @100311
  REPLACE_TEXTUALLY ~%t1%~ ~~
  SPRINT t1 @100312
  SPRINT t2 @100313
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_bonuses_small_english~ BEGIN
  SPRINT t1 @100314
  REPLACE_TEXTUALLY ~%t1%~ ~~
END

// Requires "new_ac", the new AC bonus
DEFINE_PATCH_MACRO ~revised_shields_bonuses_medium_english~ BEGIN
  PATCH_IF (%index% != 0x50) BEGIN // Identified descriptions
    SPRINT t1 @100315
    SPRINT t2 @100316
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END ELSE BEGIN // unidentified
    SPRINT t1 @100315
    SPRINT t2 @100317
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END

  SPRINT t1 @100319
  SPRINT t2 @100324
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

// Requires "new_ac", the new AC bonus, and "new_type", the new missile bonus
DEFINE_PATCH_MACRO ~revised_shields_bonuses_large_english~ BEGIN
  PATCH_IF (%index% != 0x50) BEGIN // Identified descriptions
    SPRINT t1 @100315
    SPRINT t2 @100316
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END ELSE BEGIN // unidentified
    SPRINT t1 @100315
    SPRINT t2 @100318
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END

  SPRINT t1 @100319
  SPRINT t2 @100320
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~

  PATCH_IF (new_type == 0 || %index% == 0x50) BEGIN // Unidentified descriptions
    SPRINT t1 @100321
    SPRINT t2 @100332
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END ELSE BEGIN // Identified that had a non-standard missile bonus beforehand
    SPRINT t1 @100322
    SPRINT t2 @100323
    REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
  END
END

DEFINE_PATCH_MACRO ~revised_shields_small_shields_weight~ BEGIN
  SPRINT t1 @100333
  SPRINT t2 @100334
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_small_shields_strength~ BEGIN
  SPRINT t1 @100335
  SPRINT t2 @100336
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_medium_shields_weight~ BEGIN
  SPRINT t1 @100337
  SPRINT t2 @100338
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_medium_shields_strength~ BEGIN
  SPRINT t1 @100339
  SPRINT t2 @100340
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_large_shields_weight~ BEGIN
  SPRINT t1 @100341
  SPRINT t2 @100342
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_large_shields_strength~ BEGIN
  SPRINT t1 @100343
  SPRINT t2 @100344
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_bucklers_weight~ BEGIN
  SPRINT t1 @100345
  SPRINT t2 @100346
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

DEFINE_PATCH_MACRO ~revised_shields_bucklers_strength~ BEGIN
  SPRINT t1 @100347
  SPRINT t2 @100348
  REPLACE_TEXTUALLY ~%t1%~ ~%t2%~
END

//////////////////////////////////////////////
// Macro

// Adds 'specific_amount' of AC bonus vs 'type'; if 'specific_amount' = 0, the amount added will be equal to the normal AC bonus
DEFINE_PATCH_MACRO ~ADD_AC_VS_TYPE~ BEGIN
  PATCH_IF (%specific_amount% == 0) BEGIN
    SET new_bonus = 0
    SET found = 0
    FOR (i0 = 0; i0 < num_effects && found == 0; i0 += 1) BEGIN
      READ_SHORT (effects_offset + 0x30*i0) current_opcode
      READ_LONG  (effects_offset + 0x30*i0 + 0x04) param1
      READ_LONG  (effects_offset + 0x30*i0 + 0x08) param2
      PATCH_IF (current_opcode == 0 && param2 == 0) BEGIN // AC bonus vs. all
        SET new_bonus = param1
        SET found = 1 // prevents the loop from continuing
      END
    END
  END ELSE BEGIN
    SET new_bonus = specific_amount
    SET found = 1
  END
  
  PATCH_IF (%found% == 1) BEGIN // If the shield has an AC bonus
    SET found = 0
    FOR (i0 = 0; i0 < num_effects && found == 0; i0 += 1) BEGIN
      READ_SHORT (effects_offset + 0x30*i0) current_opcode
      READ_LONG  (effects_offset + 0x30*i0 + 0x04) param1
      READ_LONG  (effects_offset + 0x30*i0 + 0x08) param2
      
      PATCH_IF (current_opcode == 0 && param2 == %type%) BEGIN // AC bonus vs. type
        SET found = 1 // prevents the loop from continuing
        PATCH_IF (param1 != (0 - new_bonus)) BEGIN // If the new bonus won't cancel the old one
          SET new_type = param1 + new_bonus
          WRITE_LONG (effects_offset + 0x30*i0 + 0x04) new_type // Increase the bonus vs. type by 'new_bonus'
        END ELSE BEGIN // remove effect
          SET new_type = 0
          DELETE_BYTES (effects_offset + 0x30*i0) 0x30
          
          PATCH_IF (abilities_offset > effects_offset) BEGIN // If the abilities are located after effects for whatever reason
            WRITE_LONG 0x64 (abilities_offset - 0x30) // Fix abilities offset
          END
          FOR (i1 = 0; i1 < num_abilities; i1 += 1) BEGIN // Loop through abilities
            READ_SHORT (abilities_offset + 0x38*i1 + 0x20) extended_effects_after
            WRITE_SHORT (abilities_offset + 0x38*i1 + 0x20) (extended_effects_after - 1) // Adjust for deletion
          END
          
          WRITE_SHORT 0x70 (num_effects - 1) // Update with new number of effects
        END
      END
    END
  END
END

//////////////////////////////////////////////
// Patching

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    LPM identify_item
  
    READ_LONG  0x64 abilities_offset
    READ_SHORT 0x68 num_abilities
    READ_LONG  0x6a effects_offset
    READ_SHORT 0x70 num_effects

    PATCH_IF buckler BEGIN // Bucklers
      // Remove +X penalty to piercing weapons
      SET type = 4 // piercing
      SET specific_amount = 0
      LAUNCH_PATCH_MACRO ~ADD_AC_VS_TYPE~

      // Update weight
      READ_LONG 0x4c weight
      PATCH_IF (weight = 2) BEGIN
        SET new_weight = 4
        WRITE_LONG 0x4c %new_weight%
        SPRINT text_update revised_shields_bucklers_weight
        LPM update_item_descriptions
      END

      // Update strength requirement
      READ_LONG 0x26 strength
      PATCH_IF (strength = 4) BEGIN
        SET new_strength = 4
        WRITE_LONG 0x26 %new_strength%
        SPRINT text_update revised_shields_bucklers_strength
        LPM update_item_descriptions
      END

      // Update description
      SPRINT text_update ~revised_shields_bonuses_buckler_english~
      LAUNCH_PATCH_MACRO ~update_item_descriptions~
    END

    PATCH_IF small_shield BEGIN // Small shields

      // Remove +X penalty to missile weapons
      SET type = 2 // missile
      SET specific_amount = 0
      LAUNCH_PATCH_MACRO ~ADD_AC_VS_TYPE~

      // Update weight
      READ_LONG 0x4c weight
      PATCH_IF (weight = 3) BEGIN
        SET new_weight = 6
        WRITE_LONG 0x4c %new_weight%
        SPRINT text_update revised_shields_small_shields_weight
        LPM update_item_descriptions
      END

      // Update strength requirement
      READ_LONG 0x26 strength
      PATCH_IF (strength = 4) BEGIN
        SET new_strength = 6
        WRITE_LONG 0x26 %new_strength%
        SPRINT text_update revised_shields_small_shields_strength
        LPM update_item_descriptions
      END

      // Update description
      SPRINT text_update ~revised_shields_bonuses_small_english~
      LAUNCH_PATCH_MACRO ~update_item_descriptions~
    END

    PATCH_IF medium_shield BEGIN // Medium shields
      SET found = 0
      SET new_ac = 0
      FOR (i0 = 0; i0 < num_effects && found == 0; i0 += 1) BEGIN
        READ_SHORT (effects_offset + 0x30*i0) current_opcode
        READ_LONG  (effects_offset + 0x30*i0 + 0x04) param1
        READ_LONG  (effects_offset + 0x30*i0 + 0x08) param2
        PATCH_IF (current_opcode == 0 && param2 == 0) BEGIN // AC bonus vs. all
          // Increase AC bonus by 1
          SET new_ac = param1 + 1
          WRITE_SHORT (effects_offset + 0x30*i0 + 0x04) new_ac
          SET found = 1 // Prevents the loop from continuing
        END
      END

      // Add -1 penalty to THAC0
      LPF ADD_ITEM_EQEFFECT INT_VAR opcode=54 target=1 timing=2 parameter1= 0 - 1 END

      // Update weight
      READ_LONG 0x4c weight
      PATCH_IF (weight = 7) BEGIN
        SET new_weight = 15
        WRITE_LONG 0x4c %new_weight%
        SPRINT text_update revised_shields_medium_shields_weight
        LPM update_item_descriptions
      END

      // Update strength requirement
      READ_LONG 0x26 strength
      PATCH_IF (strength = 12) BEGIN
        SET new_strength = 12
        WRITE_LONG 0x26 %new_strength%
        SPRINT text_update revised_shields_medium_shields_strength
        LPM update_item_descriptions
      END

      // Update description
      SPRINT text_update ~revised_shields_bonuses_medium_english~
      LAUNCH_PATCH_MACRO ~update_item_descriptions~
    END

    PATCH_IF tower_shield BEGIN // Large/tower shields
      // Add another +1 AC bonus vs. missile weapons
      SET type = 2 // missile
      SET specific_amount = 1
      LAUNCH_PATCH_MACRO ~ADD_AC_VS_TYPE~

      // Increase AC by 2
      SET found = 0
      SET new_ac = 0
      FOR (i0 = 0; i0 < num_effects && found == 0; i0 += 1) BEGIN
        READ_SHORT (effects_offset + 0x30*i0) current_opcode
        READ_LONG  (effects_offset + 0x30*i0 + 0x04) param1
        READ_LONG  (effects_offset + 0x30*i0 + 0x08) param2
        PATCH_IF (current_opcode == 0 && param2 == 0) BEGIN // AC bonus vs. all
          SET new_ac = param1 + 2
          WRITE_SHORT (effects_offset + 0x30*i0 + 0x04) new_ac // Increase AC bonus by 2
          SET found = 1 // Prevents the loop from continuing
        END
      END

      // Add -2 penalty to THAC0
      LPF ADD_ITEM_EQEFFECT INT_VAR opcode=54 target=1 timing=2 parameter1= 0 - 2 END
      PATCH_IF
        ~%SOURCE_RES%~ STRING_EQUAL ~shld19~
      BEGIN
        LPF ADD_ITEM_EQEFFECT INT_VAR opcode=54 target=1 timing=2 parameter1= 0 - 1 END
      END

      // Update weight
      READ_LONG 0x4c weight
      PATCH_IF (weight = 15) BEGIN
        SET new_weight = 45
        WRITE_LONG 0x4c %new_weight%
        SPRINT text_update revised_shields_large_shields_weight
        LPM update_item_descriptions
      END

      // Update strength requirement
      READ_LONG 0x26 strength
      PATCH_IF (strength = 15) BEGIN
        SET new_strength = 15
        WRITE_LONG 0x26 %new_strength%
        SPRINT text_update revised_shields_large_shields_strength
        LPM update_item_descriptions
      END

      // Update description
      SPRINT text_update ~revised_shields_bonuses_large_english~
      LAUNCH_PATCH_MACRO ~update_item_descriptions~
    END

  END
  BUT_ONLY_IF_IT_CHANGES